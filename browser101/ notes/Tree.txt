한 줄 한 줄씩 읽어 DOM 요소로 변환한다. 이것을 scripting이라고 말한다. 이렇게 DOM 요소로 변환하고 CSS 요소를 CSSOM으로 변환하고 이것을 window에 표기를 하기 위해 준비한다. 
RenderTree를 만든 후, 각각의 요소들이 어떤 위치에 얼마나 크기를 가지고 표기를 할 것인지 계산을 한 다음에(layout), painting, 그림을 그리는 스텝으로 진행된다.

이 과정을 보면 크게 Construction과 Operation이라는 두 부분으로 나뉘게 된다. Construction(requests/response -> loading -> scripting), Operation(rendering -> layout -> painting)

Construction 파트에는 우리가 앞에서 살펴본 DOM 요소로 변환하고 CSSOM을 만들고 RenderTree를 만드는 과정까지 속한다.

Operation 과정에서 layout, paint, composition을 통해 최종적으로 사용자에게 내용이 우리의 웹 페이지가 보이게 되는 것이다.

자세히 설명하자면 layout은 우리가 만든 RenderTree를 이용해서 (RenderTree에는 DOM 요소뿐만 아니라 최종적으로 계산된 CSS 스타일이 포함돼 있다) 아 ~ window 위에서 이 요소는 이 정도 위치에, 그리고 이 정도 크기로 배치 하고, 얘는 여기에, 얘는 여기에 이렇게 배치한다. 레이아웃을 구상한다는 의미. 이렇게 계산을 하고 그다음에 paint 과정이 발생한다.

paint 과정은 우리가 계산한 레이아웃을 바로 그림을 그리는 것이 아니라, 우리가 레이아웃을 얼마나 배치했느냐에 따라 paint 부분에서는 각각 부분을 조금씩 조금씩 잘게 나누어 이미지를 준비해 놓는다. 즉, 컴퓨터가 이해할 수 있는 이미지를 비트맵 데이터 형태로 변환하게 된다. 레이어 별로 paint를 준비만 해놓는다.

** why? 한 번에 하면 되지? 왜 레이어 별로 준비 해놓는 거지?
=> 이것은 브라우저가 성능 개선을 위해 스스로 이렇게 준비해 놓는 것이다. 만약 레이어 별로 준비해 놓지 않는다면 다른 한 부분을 수정할 때 다시 전체적으로 업데이트를 해야 하기 때문이다. 레이어 별로 나누면 그 레이어에 해당하는 부분만 수정하면 된다.

CSS에 will-change라는 속성값이 있다. 이런 will-change 속성값은 브라우저에게 '내가 이 요소는 opacity가 변화될지도 몰라'라고 얘기를 하면 브라우저는 '아~ 너는 변화 될지도 몰라? 알겠어. 나는 너를 새로운 레이어에 추가해 놓을게. 너만 바뀌면 되게 하도록 만들어 놓을게' 이렇게 준비를 하게 되는 것이다. will-change를 많이 사용하면 레이어를 많이 만들어 놓기 때문에 성능 하락!

composition은 이렇게 미리 준비한 레이어를 순서대로 차곡차곡 브라우저 위에다가 표기하면 된다.

Construction에서 자 브라우저에서 RenderTree를 만들 때까지 어떻게 하면 빠르게 만들 수 있을까? 당연히 DOM 요소가 작을수록 CSS 규칙이 작으면 작을수록 Tree가 작아지기 때문에 빠르게 만들 수 있겠지? 그래서 불필요한 태그를 남용하는 것, wrapping을 남용하는 것을 줄이면 된다.

Operation에는 paint가 자주 일어나지 않도록 만드는 것이 가장 중요하다. 네모난 박스를 translate를 이용하여 위치만 바꿔주면 composition만 발생하므로 best이다. 하지만 네모난 박스 안에 한 그림이 존재한다면, 위치도 바꿔주고 그림도 다시 그려줘야 한다. 제일 최악은 layout이다. 박스를 옮김으로써 주변의 요소들도 다시 배치해야 한다면 layout -> paint -> composition이 발생할 것이다. 제일 best는 composition만 발생시키는 것이다. 애니메이션을 하는데 layout이 발생된다면 이게 굳이 애니메이션이 필요할까? 다시 한번 생각해보는 게 좋을 것 같다.
