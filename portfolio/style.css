/* Global */
:root {
	/* Color */
	--color-white: #ffffff;
	--color-light-white: #eeeeee;
	--color-dark-white: #bdbdbd;
	--color-pink: #fe918d;
	--color-dark-pink: #ff6863;
	--color-dark-grey: #4d4d4d;
	--color-grey: #616161;
	--color-light-grey: #7c7979;
	--color-blue: #73aace;
	--color-yellow: #fff7d1;
	--color-orange: #feb546;
	--color-black: #000000;
	--color-green: #059449;
	--color-light-green: #3cab71;
	/* Font Size */
	--font-large: 48px;
	--font-medium: 28px;
	--font-regular: 18px;
	--font-small: 16px;
	--font-micro: 14px;
	/* Font Weight */
	--weight-bold: 700;
	--weight-semi-bold: 600;
	--weight-regular: 400;
	/* Size */
	--size--border--radius: 4px;
	/* Animation */
	--animation-duration: 250ms;
}

/* Universal Tags (공통적으로 정의할 것)*/
* {
	/* 우리가 패딩을 줬을 때, width와 height이 그 padding을 포함 했을 때도 동일한 width와 heigh이 되도록 만들어 놓는다는 의미 */
	box-sizing: border-box;
}

body {
	margin: 0;
	font-family: 'Noto Sans', sans-serif;
}

a {
	text-decoration: none;
	color: var(--color-white);
}

ul {
	list-style: none;
	padding-left: 0;
}

li {
	list-style: none;
}

button {
	background-color: transparent;
	cursor: pointer;
	border: none;
	outline: none;
}

/* Typography (패딩과 텍스트에 대해 스타일링을 먼저 해놓는 것) */
h1 {
	font-size: var(--font-large);
	font-weight: var(--weight-bold);
	color: var(--color-black);
	margin: 16px 0px;
}

h2 {
	font-size: var(--font-medium);
	font-weight: var(--weight-semi-bold);
	color: var(--color-black);
	margin: 8px 0;
}

h3 {
	font-size: var(--font-regular);
	font-weight: var(--weight-regular);
	color: var(--color-black);
	margin: 8px 0;
}

p {
	font-size: var(--font-regular);
	font-weight: var(--weight-regular);
	color: var(--color-black);
	margin: 4px 0;
}

/* Navbar */
#navbar {
	position: fixed;
	width: 100%;
	/* 박스가 양쪽에 나올 수 있도록 flexbox로 하자 */
	display: flex;
	justify-content: space-between;
	background-color: var(--color-green);
	/* 수직축으로 정렬 */
	align-items: center;
	color: var(--color-white);
	padding: 16px;
	background-color: transparent;
	transition: all var(--animation-duration) ease-in-out;
	z-index: 1;
}

#navbar.navbar--dark {
	background-color: var(--color-green);
	padding: 8px;
}

.navbar__logo {
	font-size: var(--font-medium);
	font-weight: var(--weight-semi-bold);
}

.navbar__menu {
	display: flex;
}

.navbar__menu__item {
	padding: 8px 12px;
	margin: 0 4px;
	cursor: pointer;
	border-radius: var(--size--border--radius);
}

.navbar__menu__item.active {
	border: 1px solid white;
}

.navbar__menu__item:hover {
	background-color: #3cab71;
	border-radius: var(--size--border--radius);
}

.navbar__toggle-btn {
	position: absolute;
	top: 18px;
	right: 32px;
	font-size: 24px;
	color: white;
	display: none;
}

/* Home */
#home {
	background: url('imgs/bg.png') center/cover no-repeat;
	padding: 40px;
	padding-top: 120px;
	text-align: center;
	color: var(--color-white);
	transition: all var(--animation-duration) ease-in-out;
}

#home.home__dark {
}

.home__avatar {
	width: 250px;
	height: 250px;
	border-radius: 50%;
	border: 2px solid var(--color-light-white);
}

.home__title,
.home__description {
	color: var(--color-white);
}

.home__contact {
	color: var(--color-white);
	font-size: var(--font-regular);
	font-weight: var(--weight-bold);
	margin: 24px;
	padding: 8px 12px;
	border: 2px solid var(--color-white);
	border-radius: var(--size--border--radius);
}

/* Section Common */
/* 전부다 대부분의 아이템들이 중간으로 정렬돼 있다.
우리가 공통적인 것들을 정의해줄 필요가 있다. 
각 섹션마다 고유한 id는 있지만 section이기 때문에 
고유한 클래스 section이라고 지정해준다.*/
.section {
	padding: 50px;
	text-align: center;
	/* 일단 브라우저 일반적인 max-width는 1200px이다
    안되면 물어보지 말고 속성 검사부터 해보자. margin이 오른쪽에만 들어가있네? */
	margin: auto;
}

.section__container {
	max-width: 1200px;
	margin: auto;
}

/* About */
.about__majors {
	display: flex;
	justify-content: space-between;
	margin: 80px 0;
}

.major__icon {
	size: 170px;
	width: 170px;
	height: 170px;
	font-size: 70px;
	line-height: 170px;
	color: var(--color-blue);
	margin: auto;
	border: 1px solid var(--color-blue);
	border-radius: 50%;
	margin-bottom: 16px;
}

.major__icon:hover i {
	color: green;
	transform: rotate(-30deg) scale(1.2);
}

.major__icon i {
	transition: var(--animation-duration);
}

.major__title,
.major__description {
	color: var(--color-dark-grey);
}

.major__description {
	font-size: var(--font-small);
}

.job {
	display: flex;
	align-items: center;
}

.job__description {
	margin: 0 16px;
	text-align: left;
}

.job__name,
.job__period {
	color: var(--color-light-grey);
}

.job__name {
	font-size: var(--font-small);
}

.job__period {
	font-size: var(--font-small);
}

#skills {
	background: lightyellow;
}

.skillset {
	color: var(--color-light-white);
	display: flex;
	background-color: var(--color-dark-grey);
	margin: 20px 0;
}

.skillset__left {
	flex-basis: 60%;
	background-color: darkgrey;
	padding: 20px 40px;
}

.skill__description {
	display: flex;
	justify-content: space-between;
}

.skill {
	margin-bottom: 32px;
}

.skill__bar {
	width: 100%;
	height: 3px;
	background-color: grey;
}

.skill__value {
	/* width: 80%; */
	height: 3px;
	background-color: orange;
}

/* CSS에서 적용하게 되면, 모든 요소에 적용이 된다. 물론 클래스를 따로 만들어서
할 수도 있다. 하지만 코드가 많아진다. 따라서 우리는 html에 css를 인라인화 시켜서
관리할 것이다. */

.skillset__right {
	flex-basis: 60%;
}

.tools {
	margin: 0;
	background-color: var(--color-grey);
}

.skillset__title {
	color: var(--color-white);
}

.tools,
.etc {
	padding: 20px;
}

/* Work */
.work__categories {
	margin: 40px;
}

.category__btn {
	border: 1px solid var(--color-dark-white);
	border-radius: 4px;
	font-size: var(--font-regular);
	padding: 8px 48px;
}

.category__btn.active,
.category__btn:hover {
	background-color: var(--color-green);
	color: white;
}

.category__count {
	background-color: var(--color-orange);
	border-radius: 50%;
	color: var(--color-white);
	margin-left: 5px;
	width: 24px;
	height: 24px;
	/* 여기까지만 해도 동그라미가 이쁘지 않다. 이유는 span은
    콘텐츠를 꽉 감싸주는 아이이기 때문이다. display를 inline-block으로
    바꾼다. */
	display: inline-block;
	line-height: 24px;
	position: relative;
	top: -24px;
	left: 5px;
	opacity: 0;
	transition: all var(--animation-duration);
}

.category__btn.active .category__count,
.category__btn:hover .category__count {
	opacity: 1;
	top: 0px;
}

.work__projects {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	opacity: 1;
	transition: all var(--animation-duration) ease-out;
}

.work__projects.animation-out {
	opacity: 0;
	transform: scale(0.99) translateY(40px);
}

.project {
	position: relative;
	width: 280px;
	height: 200px;
	margin: 2px;
	background-color: var(--color-light-white);
	display: flex;
	justify-content: center;
	align-items: center;
}

.project.invisible {
	display: none;
}

.project__img {
	max-width: 100%;
	max-height: 100%;
}

/* project__description은 원래 project안에 있다
우리가 원하는 것은 마우스를 올렸을 때 project의 설명을 나타내고 싶다.
이것을 하기 위해서는 원래 있던 자리에 벗어나서 무언가를 보여줘야한다.
이것은 position: absolute이다. 
relative는 움직이긴 움직이지만 원래 상태를 유지하면 움직이게 되는 것이다.
position: absolute를 사용하게 되면 어디로 이동할지 top과 left를 지정해줘야 한다. top, left를 0으로 두면 제일 위로 올라간다.
왜냐하면 근접한 부모노드 중에 기본값인 position: static을 사용하지 않는 부모를 찾아가게 된다. 그런데 지금 position__description이 담겨 있는 부모는 project이다. project는 position을 지정하지 않았기 때문에 default 값인 position static이 된다. 결국 이동하게 되면서 body 부분으로 가게 되는 것이다.이를 방지하기 위해 project 클래스에 다른 것을 사용해줘야 한다. */
.project__description {
	position: absolute;
	top: 0;
	left: 0;
	background-color: black;
	width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column;
	justify-content: center;
	opacity: 0;
	transform: translateY(10px);
	transition: all var(--animation-duration) ease-in;
}

.project__description h3 {
	color: var(--color-white);
}

.project__description h3:after {
	display: block;
	position: relative;
	left: 50%;
	content: '';
	margin-left: -12px;
	margin-top: 8px;
	width: 25px;
	height: 2px;
	background-color: var(--color-dark-white);
}

.project:hover .project__description {
	opacity: 0.8;
	transform: translateY(0px);
}

/* Testimonials */
#testimonials {
	background-color: var(--color-light-white);
}

.testimonials {
	margin: 40px;
}

.testimonial {
	display: flex;
	margin: 32px 0;
}

.testimonial__avatar {
	width: 150px;
	height: 150px;
	border-radius: 50%;
	margin: 12px;
}

.testimonial__avatar:nth-child(odd) {
	margin-right: 40px;
}

.testimonial__avatar:nth-child(even) {
	margin-left: 40px;
}

.testimonial__speech-bubble {
	width: 70%;
	padding: 18px;
	background-color: var(--color-white);
	border-radius: var(--size--border--radius);
	word-wrap: break-word;
}

.testimonial__speech-bubble p {
	color: var(--color-light-grey);
}

.testimonial__speech-bubble a {
	color: var(--color-pink);
}

/* Contact */
#contact {
	background-color: var(--color-green);
}

.contact__title,
.contact__email,
.contact__links,
.contact__rights {
	color: var(--color-white);
}

.contact__title {
	margin: 32px 0;
}

.contact__links {
	font-size: var(--font-large);
	margin: 24px 0;
}

.contact__links i:hover {
	transform: scale(1.1);
	color: var(--color-yellow);
	transition: all var(--animation-duration) ease-in;
}

/* For below 768px screen width */
/* 미디어 쿼리 안에 들어가는 내용은 최소한의 것만 들어가야 한다. 
즉, 차이점들만 뽑아진 아이들만 들어가야 한다는 것이다.
스타일링은 본론에만 차이점만 media에 넣자.*/
@media screen and (max-width: 768px) {
	.navbar__toggle-btn {
		display: block;
	}

	#navbar {
		flex-direction: column;
		align-items: flex-start;
		/* flex-start를 사용하게 되면 왼쪽으로 정렬 */
	}

	.navbar__menu {
		flex-direction: column;
		text-align: center;
		width: 100%;
		display: none;
	}

	.about__majors {
		flex-direction: column;
	}

	.major {
		margin-bottom: 38px;
	}

	.skillset {
		flex-direction: column;
	}

	.project {
		/* grow란 알아서 화면을 메꿔주는 것이다. */
		flex-grow: 1;
	}

	.testimonial__avatar {
		width: 80px;
		height: 80px;
	}
}

.arrow-up {
	font-size: 50px;
	bottom: 50px;
	right: 50px;
	width: 70px;
	height: 70px;
	position: fixed;
	color: var(--color-white);
	background-color: var(--color-light-green);
	border-radius: 50%;
	/* display none으로 하면 transition이 안 먹힌다. */
	/* display: none; */
	opacity: 0;
	pointer-events: none;
	transition: opacity 300ms ease-in;
}

.arrow-up.visible {
	pointer-events: auto;
	opacity: 1;
}

.arrow-up:hover {
	opacity: 1;
	cursor: pointer;
	transform: scale(1.2);
	transition: all var(--animation-duration) ease-in;
}
